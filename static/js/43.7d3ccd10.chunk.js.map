{"version":3,"sources":["../node_modules/react-final-form/dist/react-final-form.es.js","../node_modules/react-final-form-listeners/dist/react-final-form-listeners.es.js","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../../src/timer.js","../../src/domHelpers.js","../../src/createGridComponent.js","../../src/createListComponent.js","../../src/FixedSizeList.js","../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js"],"names":["renderComponent","props","lazyProps","name","render","children","component","rest","_objectWithoutPropertiesLoose","createElement","Object","assign","undefined","Error","useWhenValueChanges","value","callback","isEqual","a","b","previous","React","useRef","useEffect","current","shallowEqual","keysA","keys","keysB","length","bHasOwnProperty","prototype","hasOwnProperty","bind","idx","key","isSyntheticEvent","candidate","stopPropagation","ReactFinalFormContext","createContext","useLatest","ref","addLazyState","dest","state","forEach","defineProperty","get","enumerable","addLazyFormState","versions","version$1","all","formSubscriptionItems","reduce","result","ReactFinalForm","_ref","debug","decorators","destroyOnUnregister","alternateFormApi","form","initialValues","initialValuesEqual","keepDirtyOnReinitialize","mutators","onSubmit","_ref$subscription","subscription","validate","validateOnBlur","config","init","useConstant","f","createForm","pauseValidation","_React$useState","useState","initialState","subscribe","setState","stateRef","isValidationPaused","resumeValidation","unsubscriptions","s","concat","map","decorator","reverse","unsubscribe","setConfig","renderProps","_extends","reset","eventOrValues","handleSubmit","event","preventDefault","submit","Provider","__versions","useForm","componentName","useContext","useFormState","_temp","onChange","firstRender","onChangeRef","newState","lazyState","FormSpy","reactFinalForm","isReactNative","window","navigator","product","all$1","fieldSubscriptionItems","defaultFormat","defaultParse","defaultIsEqual","useField","_config","afterSubmit","allowNull","data","defaultValue","_config$format","format","formatOnBlur","initialValue","multiple","_config$parse","parse","_config$subscription","type","validateFields","_value","configRef","register","silent","registerField","beforeSubmit","_configRef$current","_configRef$current$fo","getFieldState","formatted","change","getValidator","handlers","onBlur","useCallback","blur","fieldState","target","currentValue","valueProp","nativeEvent","text","_detypedEvent$target","checked","Array","isArray","index","indexOf","slice","options","option","selected","push","getSelectedValues","getValue","onFocus","focus","meta","addLazyFieldMetaState","input","Field","forwardRef","field","i","arguments","source","call","apply","this","_inheritsLoose","subClass","superClass","create","constructor","__proto__","Component","OnChangeState","_React$Component","_this","_proto","componentDidUpdate","_this$props","OnChange","ListItemIcon","classes","className","other","_objectWithoutProperties","context","ListContext","clsx","root","alignItems","alignItemsFlexStart","withStyles","theme","minWidth","color","palette","action","active","flexShrink","display","marginTop","areInputsEqual","newInputs","lastInputs","memoizeOne","resultFn","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","requestTimeout","start","id","requestAnimationFrame","cachedRTLResult","getRTLOffsetType","recalculate","outerDiv","document","outerStyle","innerDiv","innerStyle","defaultItemKey","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_instanceProps","_outerRef","_resetIsScrollingTimeoutId","instance","isScrolling","scrollDirection","scrollOffset","scrollUpdateWasRequested","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","direction","itemSize","layout","itemStyleCache","style","offset","size","isHorizontal","isRtl","offsetHorizontal","position","left","right","top","height","width","clientWidth","scrollLeft","scrollWidth","prevState","Math","clientHeight","scrollHeight","scrollTop","outerRef","validateSharedProps","nextProps","align","itemCount","initialScrollOffset","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","onScroll","startIndex","stopIndex","items","_getItemStyle","estimatedTotalSize","overflow","WebkitOverflowScrolling","willChange","pointerEvents","overscanCount","overscanBackward","overscanForward","FixedSizeList","lastItemOffset","maxOffset","minOffset","middleOffset","numVisibleItems","ListItemSecondaryAction","muiName","transform"],"mappings":"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","file":"static/js/43.7d3ccd10.chunk.js","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport React, { createElement, createContext, useState, useEffect, useContext, useRef, useCallback, forwardRef } from 'react';\nimport { formSubscriptionItems, createForm, version as version$1, fieldSubscriptionItems } from 'final-form';\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nfunction renderComponent(props, lazyProps, name) {\n  var render = props.render,\n      children = props.children,\n      component = props.component,\n      rest = _objectWithoutPropertiesLoose(props, [\"render\", \"children\", \"component\"]);\n\n  if (component) {\n    return /*#__PURE__*/createElement(component, Object.assign(lazyProps, rest, {\n      children: children,\n      render: render\n    }));\n  }\n\n  if (render) {\n    return render(children === undefined ? Object.assign(lazyProps, rest) : // inject children back in\n    Object.assign(lazyProps, rest, {\n      children: children\n    }));\n  }\n\n  if (typeof children !== 'function') {\n    throw new Error(\"Must specify either a render prop, a render function as children, or a component prop to \" + name);\n  }\n\n  return children(Object.assign(lazyProps, rest));\n}\n\nfunction useWhenValueChanges(value, callback, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = function isEqual(a, b) {\n      return a === b;\n    };\n  }\n\n  var previous = React.useRef(value);\n  React.useEffect(function () {\n    if (!isEqual(value, previous.current)) {\n      callback();\n      previous.current = value;\n    }\n  });\n}\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\n\nfunction useConstant(init) {\n  var ref = React.useRef();\n\n  if (!ref.current) {\n    ref.current = init();\n  }\n\n  return ref.current;\n}\n\nvar shallowEqual = function shallowEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false;\n  }\n\n  var keysA = Object.keys(a);\n  var keysB = Object.keys(b);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isSyntheticEvent = function isSyntheticEvent(candidate) {\n  return !!(candidate && typeof candidate.stopPropagation === 'function');\n};\n\nvar ReactFinalFormContext = /*#__PURE__*/createContext();\n\nfunction useLatest(value) {\n  var ref = React.useRef(value);\n  React.useEffect(function () {\n    ref.current = value;\n  });\n  return ref;\n}\n\nvar version = \"6.5.2\";\n\nvar addLazyState = function addLazyState(dest, state, keys) {\n  keys.forEach(function (key) {\n    Object.defineProperty(dest, key, {\n      get: function get() {\n        return state[key];\n      },\n      enumerable: true\n    });\n  });\n};\n\nvar addLazyFormState = function addLazyFormState(dest, state) {\n  return addLazyState(dest, state, ['active', 'dirty', 'dirtyFields', 'dirtySinceLastSubmit', 'dirtyFieldsSinceLastSubmit', 'error', 'errors', 'hasSubmitErrors', 'hasValidationErrors', 'initialValues', 'invalid', 'modified', 'modifiedSinceLastSubmit', 'pristine', 'submitError', 'submitErrors', 'submitFailed', 'submitSucceeded', 'submitting', 'touched', 'valid', 'validating', 'values', 'visited']);\n};\nvar addLazyFieldMetaState = function addLazyFieldMetaState(dest, state) {\n  return addLazyState(dest, state, ['active', 'data', 'dirty', 'dirtySinceLastSubmit', 'error', 'initial', 'invalid', 'length', 'modified', 'modifiedSinceLastSubmit', 'pristine', 'submitError', 'submitFailed', 'submitSucceeded', 'submitting', 'touched', 'valid', 'validating', 'visited']);\n};\n\nvar versions = {\n  'final-form': version$1,\n  'react-final-form': version\n};\nvar all = formSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nfunction ReactFinalForm(_ref) {\n  var debug = _ref.debug,\n      decorators = _ref.decorators,\n      destroyOnUnregister = _ref.destroyOnUnregister,\n      alternateFormApi = _ref.form,\n      initialValues = _ref.initialValues,\n      initialValuesEqual = _ref.initialValuesEqual,\n      keepDirtyOnReinitialize = _ref.keepDirtyOnReinitialize,\n      mutators = _ref.mutators,\n      onSubmit = _ref.onSubmit,\n      _ref$subscription = _ref.subscription,\n      subscription = _ref$subscription === void 0 ? all : _ref$subscription,\n      validate = _ref.validate,\n      validateOnBlur = _ref.validateOnBlur,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"debug\", \"decorators\", \"destroyOnUnregister\", \"form\", \"initialValues\", \"initialValuesEqual\", \"keepDirtyOnReinitialize\", \"mutators\", \"onSubmit\", \"subscription\", \"validate\", \"validateOnBlur\"]);\n\n  var config = {\n    debug: debug,\n    destroyOnUnregister: destroyOnUnregister,\n    initialValues: initialValues,\n    keepDirtyOnReinitialize: keepDirtyOnReinitialize,\n    mutators: mutators,\n    onSubmit: onSubmit,\n    validate: validate,\n    validateOnBlur: validateOnBlur\n  };\n  var form = useConstant(function () {\n    var f = alternateFormApi || createForm(config); // pause validation until children register all fields on first render (unpaused in useEffect() below)\n\n    f.pauseValidation();\n    return f;\n  }); // synchronously register and unregister to query form state for our subscription on first render\n\n  var _React$useState = useState(function () {\n    var initialState = {};\n    form.subscribe(function (state) {\n      initialState = state;\n    }, subscription)();\n    return initialState;\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1]; // save a copy of state that can break through the closure\n  // on the shallowEqual() line below.\n\n\n  var stateRef = useLatest(state);\n  useEffect(function () {\n    // We have rendered, so all fields are now registered, so we can unpause validation\n    form.isValidationPaused() && form.resumeValidation();\n    var unsubscriptions = [form.subscribe(function (s) {\n      if (!shallowEqual(s, stateRef.current)) {\n        setState(s);\n      }\n    }, subscription)].concat(decorators ? decorators.map(function (decorator) {\n      return (// this noop ternary is to appease the flow gods\n        // istanbul ignore next\n        decorator(form)\n      );\n    }) : []);\n    return function () {\n      form.pauseValidation(); // pause validation so we don't revalidate on every field deregistration\n\n      unsubscriptions.reverse().forEach(function (unsubscribe) {\n        return unsubscribe();\n      }); // don't need to resume validation here; either unmounting, or will re-run this hook with new deps\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [decorators]); // warn about decorator changes\n  // istanbul ignore next\n\n  if (process.env.NODE_ENV !== 'production') {\n    // You're never supposed to use hooks inside a conditional, but in this\n    // case we can be certain that you're not going to be changing your\n    // NODE_ENV between renders, so this is safe.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useWhenValueChanges(decorators, function () {\n      console.error('Form decorators should not change from one render to the next as new values will be ignored');\n    }, shallowEqual);\n  } // allow updatable config\n\n\n  useWhenValueChanges(debug, function () {\n    form.setConfig('debug', debug);\n  });\n  useWhenValueChanges(destroyOnUnregister, function () {\n    form.destroyOnUnregister = !!destroyOnUnregister;\n  });\n  useWhenValueChanges(keepDirtyOnReinitialize, function () {\n    form.setConfig('keepDirtyOnReinitialize', keepDirtyOnReinitialize);\n  });\n  useWhenValueChanges(initialValues, function () {\n    form.setConfig('initialValues', initialValues);\n  }, initialValuesEqual || shallowEqual);\n  useWhenValueChanges(mutators, function () {\n    form.setConfig('mutators', mutators);\n  });\n  useWhenValueChanges(onSubmit, function () {\n    form.setConfig('onSubmit', onSubmit);\n  });\n  useWhenValueChanges(validate, function () {\n    form.setConfig('validate', validate);\n  });\n  useWhenValueChanges(validateOnBlur, function () {\n    form.setConfig('validateOnBlur', validateOnBlur);\n  });\n\n  var handleSubmit = function handleSubmit(event) {\n    if (event) {\n      // sometimes not true, e.g. React Native\n      if (typeof event.preventDefault === 'function') {\n        event.preventDefault();\n      }\n\n      if (typeof event.stopPropagation === 'function') {\n        // prevent any outer forms from receiving the event too\n        event.stopPropagation();\n      }\n    }\n\n    return form.submit();\n  };\n\n  var renderProps = {\n    form: _extends({}, form, {\n      reset: function reset(eventOrValues) {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          form.reset();\n        } else {\n          form.reset(eventOrValues);\n        }\n      }\n    }),\n    handleSubmit: handleSubmit\n  };\n  addLazyFormState(renderProps, state);\n  return /*#__PURE__*/createElement(ReactFinalFormContext.Provider, {\n    value: form\n  }, renderComponent(_extends({}, rest, {\n    __versions: versions\n  }), renderProps, 'ReactFinalForm'));\n}\n\nfunction useForm(componentName) {\n  var form = useContext(ReactFinalFormContext);\n\n  if (!form) {\n    throw new Error((componentName || 'useForm') + \" must be used inside of a <Form> component\");\n  }\n\n  return form;\n}\n\nfunction useFormState(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      onChange = _ref.onChange,\n      _ref$subscription = _ref.subscription,\n      subscription = _ref$subscription === void 0 ? all : _ref$subscription;\n\n  var form = useForm('useFormState');\n  var firstRender = useRef(true);\n  var onChangeRef = useRef(onChange);\n  onChangeRef.current = onChange; // synchronously register and unregister to query field state for our subscription on first render\n\n  var _React$useState = useState(function () {\n    var initialState = {};\n    form.subscribe(function (state) {\n      initialState = state;\n    }, subscription)();\n\n    if (onChange) {\n      onChange(initialState);\n    }\n\n    return initialState;\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  useEffect(function () {\n    return form.subscribe(function (newState) {\n      if (firstRender.current) {\n        firstRender.current = false;\n      } else {\n        setState(newState);\n\n        if (onChangeRef.current) {\n          onChangeRef.current(newState);\n        }\n      }\n    }, subscription);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  var lazyState = {};\n  addLazyFormState(lazyState, state);\n  return lazyState;\n}\n\nfunction FormSpy(_ref) {\n  var onChange = _ref.onChange,\n      subscription = _ref.subscription,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"subscription\"]);\n\n  var reactFinalForm = useForm('FormSpy');\n  var state = useFormState({\n    onChange: onChange,\n    subscription: subscription\n  });\n\n  if (onChange) {\n    return null;\n  }\n\n  var renderProps = {\n    form: _extends({}, reactFinalForm, {\n      reset: function reset(eventOrValues) {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          reactFinalForm.reset();\n        } else {\n          reactFinalForm.reset(eventOrValues);\n        }\n      }\n    })\n  };\n  return renderComponent(_extends({}, rest, renderProps), state, 'FormSpy');\n}\n\nvar isReactNative = typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative';\n\nvar getSelectedValues = function getSelectedValues(options) {\n  var result = [];\n\n  if (options) {\n    for (var index = 0; index < options.length; index++) {\n      var option = options[index];\n\n      if (option.selected) {\n        result.push(option.value);\n      }\n    }\n  }\n\n  return result;\n};\n\nvar getValue = function getValue(event, currentValue, valueProp, isReactNative) {\n  if (!isReactNative && event.nativeEvent && event.nativeEvent.text !== undefined) {\n    return event.nativeEvent.text;\n  }\n\n  if (isReactNative && event.nativeEvent) {\n    return event.nativeEvent.text;\n  }\n\n  var detypedEvent = event;\n  var _detypedEvent$target = detypedEvent.target,\n      type = _detypedEvent$target.type,\n      value = _detypedEvent$target.value,\n      checked = _detypedEvent$target.checked;\n\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue) ? currentValue.concat(valueProp) : [valueProp];\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue;\n          }\n\n          var index = currentValue.indexOf(valueProp);\n\n          if (index < 0) {\n            return currentValue;\n          } else {\n            return currentValue.slice(0, index).concat(currentValue.slice(index + 1));\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked;\n      }\n\n    case 'select-multiple':\n      return getSelectedValues(event.target.options);\n\n    default:\n      return value;\n  }\n};\n\nvar all$1 = fieldSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar defaultFormat = function defaultFormat(value, name) {\n  return value === undefined ? '' : value;\n};\n\nvar defaultParse = function defaultParse(value, name) {\n  return value === '' ? undefined : value;\n};\n\nvar defaultIsEqual = function defaultIsEqual(a, b) {\n  return a === b;\n};\n\nfunction useField(name, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _config = config,\n      afterSubmit = _config.afterSubmit,\n      allowNull = _config.allowNull,\n      component = _config.component,\n      data = _config.data,\n      defaultValue = _config.defaultValue,\n      _config$format = _config.format,\n      format = _config$format === void 0 ? defaultFormat : _config$format,\n      formatOnBlur = _config.formatOnBlur,\n      initialValue = _config.initialValue,\n      multiple = _config.multiple,\n      _config$parse = _config.parse,\n      parse = _config$parse === void 0 ? defaultParse : _config$parse,\n      _config$subscription = _config.subscription,\n      subscription = _config$subscription === void 0 ? all$1 : _config$subscription,\n      type = _config.type,\n      validateFields = _config.validateFields,\n      _value = _config.value;\n  var form = useForm('useField');\n  var configRef = useLatest(config);\n\n  var register = function register(callback, silent) {\n    return (// avoid using `state` const in any closures created inside `register`\n      // because they would refer `state` from current execution context\n      // whereas actual `state` would defined in the subsequent `useField` hook\n      // execution\n      // (that would be caused by `setState` call performed in `register` callback)\n      form.registerField(name, callback, subscription, {\n        afterSubmit: afterSubmit,\n        beforeSubmit: function beforeSubmit() {\n          var _configRef$current = configRef.current,\n              beforeSubmit = _configRef$current.beforeSubmit,\n              formatOnBlur = _configRef$current.formatOnBlur,\n              _configRef$current$fo = _configRef$current.format,\n              format = _configRef$current$fo === void 0 ? defaultFormat : _configRef$current$fo;\n\n          if (formatOnBlur) {\n            var _ref = form.getFieldState(name),\n                value = _ref.value;\n\n            var formatted = format(value, name);\n\n            if (formatted !== value) {\n              form.change(name, formatted);\n            }\n          }\n\n          return beforeSubmit && beforeSubmit();\n        },\n        data: data,\n        defaultValue: defaultValue,\n        getValidator: function getValidator() {\n          return configRef.current.validate;\n        },\n        initialValue: initialValue,\n        isEqual: function isEqual(a, b) {\n          return (configRef.current.isEqual || defaultIsEqual)(a, b);\n        },\n        silent: silent,\n        validateFields: validateFields\n      })\n    );\n  };\n\n  var firstRender = useRef(true); // synchronously register and unregister to query field state for our subscription on first render\n\n  var _React$useState = useState(function () {\n    var initialState = {}; // temporarily disable destroyOnUnregister\n\n    var destroyOnUnregister = form.destroyOnUnregister;\n    form.destroyOnUnregister = false;\n    register(function (state) {\n      initialState = state;\n    }, true)(); // return destroyOnUnregister to its original value\n\n    form.destroyOnUnregister = destroyOnUnregister;\n    return initialState;\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  useEffect(function () {\n    return register(function (state) {\n      if (firstRender.current) {\n        firstRender.current = false;\n      } else {\n        setState(state);\n      }\n    }, false);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [name, data, defaultValue, // If we want to allow inline fat-arrow field-level validation functions, we\n  // cannot reregister field every time validate function !==.\n  // validate,\n  initialValue // The validateFields array is often passed as validateFields={[]}, creating\n  // a !== new array every time. If it needs to be changed, a rerender/reregister\n  // can be forced by changing the key prop\n  // validateFields\n  ]);\n  var handlers = {\n    onBlur: useCallback(function (event) {\n      state.blur();\n\n      if (formatOnBlur) {\n        /**\n         * Here we must fetch the value directly from Final Form because we cannot\n         * trust that our `state` closure has the most recent value. This is a problem\n         * if-and-only-if the library consumer has called `onChange()` immediately\n         * before calling `onBlur()`, but before the field has had a chance to receive\n         * the value update from Final Form.\n         */\n        var fieldState = form.getFieldState(state.name);\n        state.change(format(fieldState.value, state.name));\n      }\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [state.blur, state.name, format, formatOnBlur]),\n    onChange: useCallback(function (event) {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== 'production' && event && event.target) {\n        var targetType = event.target.type;\n        var unknown = ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) && !type && component !== 'select';\n\n        var _value2 = targetType === 'select-multiple' ? state.value : _value;\n\n        if (unknown) {\n          console.error(\"You must pass `type=\\\"\" + (targetType === 'select-multiple' ? 'select' : targetType) + \"\\\"` prop to your Field(\" + name + \") component.\\n\" + (\"Without it we don't know how to unpack your `value` prop - \" + (Array.isArray(_value2) ? \"[\" + _value2 + \"]\" : \"\\\"\" + _value2 + \"\\\"\") + \".\"));\n        }\n      }\n\n      var value = event && event.target ? getValue(event, state.value, _value, isReactNative) : event;\n      state.change(parse(value, name));\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [_value, name, parse, state.change, state.value, type]),\n    onFocus: useCallback(function (event) {\n      state.focus();\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [state.focus])\n  };\n  var meta = {};\n  addLazyFieldMetaState(meta, state);\n\n  var input = _extends({\n    name: name,\n\n    get value() {\n      var value = state.value;\n\n      if (formatOnBlur) {\n        if (component === 'input') {\n          value = defaultFormat(value);\n        }\n      } else {\n        value = format(value, name);\n      }\n\n      if (value === null && !allowNull) {\n        value = '';\n      }\n\n      if (type === 'checkbox' || type === 'radio') {\n        return _value;\n      } else if (component === 'select' && multiple) {\n        return value || [];\n      }\n\n      return value;\n    },\n\n    get checked() {\n      var value = state.value;\n\n      if (type === 'checkbox') {\n        value = format(value, name);\n\n        if (_value === undefined) {\n          return !!value;\n        } else {\n          return !!(Array.isArray(value) && ~value.indexOf(_value));\n        }\n      } else if (type === 'radio') {\n        return format(value, name) === _value;\n      }\n\n      return undefined;\n    }\n\n  }, handlers);\n\n  if (multiple) {\n    input.multiple = multiple;\n  }\n\n  if (type !== undefined) {\n    input.type = type;\n  }\n\n  var renderProps = {\n    input: input,\n    meta: meta\n  }; // assign to force Flow check\n\n  return renderProps;\n}\n\nvar Field = /*#__PURE__*/forwardRef(function Field(_ref, ref) {\n  var afterSubmit = _ref.afterSubmit,\n      allowNull = _ref.allowNull,\n      beforeSubmit = _ref.beforeSubmit,\n      children = _ref.children,\n      component = _ref.component,\n      data = _ref.data,\n      defaultValue = _ref.defaultValue,\n      format = _ref.format,\n      formatOnBlur = _ref.formatOnBlur,\n      initialValue = _ref.initialValue,\n      isEqual = _ref.isEqual,\n      multiple = _ref.multiple,\n      name = _ref.name,\n      parse = _ref.parse,\n      subscription = _ref.subscription,\n      type = _ref.type,\n      validate = _ref.validate,\n      validateFields = _ref.validateFields,\n      value = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"afterSubmit\", \"allowNull\", \"beforeSubmit\", \"children\", \"component\", \"data\", \"defaultValue\", \"format\", \"formatOnBlur\", \"initialValue\", \"isEqual\", \"multiple\", \"name\", \"parse\", \"subscription\", \"type\", \"validate\", \"validateFields\", \"value\"]);\n\n  var field = useField(name, {\n    afterSubmit: afterSubmit,\n    allowNull: allowNull,\n    beforeSubmit: beforeSubmit,\n    children: children,\n    component: component,\n    data: data,\n    defaultValue: defaultValue,\n    format: format,\n    formatOnBlur: formatOnBlur,\n    initialValue: initialValue,\n    isEqual: isEqual,\n    multiple: multiple,\n    parse: parse,\n    subscription: subscription,\n    type: type,\n    validate: validate,\n    validateFields: validateFields,\n    value: value\n  });\n\n  if (typeof children === 'function') {\n    return children(_extends({}, field, rest));\n  }\n\n  if (typeof component === 'string') {\n    // ignore meta, combine input with any other props\n    return /*#__PURE__*/createElement(component, _extends({}, field.input, {\n      children: children,\n      ref: ref\n    }, rest));\n  }\n\n  if (!name) {\n    throw new Error('prop name cannot be undefined in <Field> component');\n  }\n\n  return renderComponent(_extends({\n    children: children,\n    component: component,\n    ref: ref\n  }, rest), field, \"Field(\" + name + \")\");\n});\n\nfunction withTypes() {\n  return {\n    Form: ReactFinalForm,\n    FormSpy: FormSpy\n  };\n}\n\nexport { Field, ReactFinalForm as Form, FormSpy, useField, useForm, useFormState, version, withTypes };\n","import { Component, createElement } from 'react';\nimport { Field } from 'react-final-form';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ExternallyChangedState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ExternallyChangedState, _React$Component);\n\n  function ExternallyChangedState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value,\n      externallyChanged: false\n    };\n    return _this;\n  }\n\n  var _proto = ExternallyChangedState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        value = _this$props.input.value,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value,\n        externallyChanged: !active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return this.props.children(this.state.externallyChanged);\n  };\n\n  return ExternallyChangedState;\n}(Component);\n\nvar ExternallyChanged = function ExternallyChanged(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(ExternallyChangedState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnBlurState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnBlurState, _React$Component);\n\n  function OnBlurState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnBlurState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (previous && !active) {\n      children();\n    }\n\n    if (previous !== active) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnBlurState;\n}(Component);\n\nvar OnBlur = function OnBlur(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnBlurState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnChangeState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnChangeState, _React$Component);\n\n  function OnChangeState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value\n    };\n    return _this;\n  }\n\n  var _proto = OnChangeState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        value = _this$props.input.value;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value\n      });\n      children(value, previous);\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnChangeState;\n}(Component);\n\nvar OnChange = function OnChange(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(OnChangeState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnFocusState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnFocusState, _React$Component);\n\n  function OnFocusState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnFocusState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (active && !previous) {\n      this.setState({\n        previous: active\n      });\n      children();\n    } else if (!active && previous) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnFocusState;\n}(Component);\n\nvar OnFocus = function OnFocus(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnFocusState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\n//\n\nexport { ExternallyChanged, OnBlur, OnChange, OnFocus };\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","function areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (newInputs[i] !== lastInputs[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);"],"sourceRoot":""}