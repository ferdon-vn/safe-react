{"version":3,"sources":["../node_modules/bs58/index.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js","../node_modules/hdkey/lib/hdkey.js","../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/index.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js"],"names":["basex","require","module","exports","createHash","bs58checkBase","buffer","tmp","update","digest","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","addresses","i","dkey","deriveChild","address","toString","push","dPath","isValidPath","parts","split","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit","assert","crypto","bs58check","secp256k1","MASTER_SECRET","from","BITCOIN_VERSIONS","private","public","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","alloc","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj","HARDENED_OFFSET","errors","cond","msg","isUint8Array","name","Array","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","call","contextRandomize","seed","seckey","privateKeyNegate","tweak","privateKeyTweakMul","pubkey","compressed","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","options","noncefn","recid","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","first","x","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","toArrayLike","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pair","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","d","canonical","k","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","sha256","getX","toArray","getY"],"mappings":"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","file":"static/js/12.81edf81e.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n"],"sourceRoot":""}