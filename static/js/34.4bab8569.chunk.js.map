{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/index.tsx","components/forms/Field/index.tsx","components/layout/Bold/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","components/AddressInfo/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/utils.ts","components/ScanQRModal/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/assets/arrow-down.svg","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","components/forms/TextareaField/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","marginRight","marginLeft","manage","fontSize","closeIcon","height","width","qrCodeBtn","cursor","formContainer","buttonRow","fontFamily","submitButton","boxShadow","dataInput","lineHeight","border","selectAddress","useStyles","makeStyles","nativeCoin","getNetworkInfo","SendCustomTx","initialValues","onClose","onNext","contractAddress","switchMethod","isABI","classes","ethBalance","useSelector","safeSelector","useState","qrModalOpen","setQrModalOpen","address","name","selectedEntry","setSelectedEntry","isValidAddress","setIsValidAddress","saveForm","values","a","handleSubmit","submit","data","value","openQrModal","closeQrModal","formMutators","setMax","args","state","utils","changeValue","setRecipient","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","subscription","submitting","pristine","onSubmit","mutators","shouldDisableSubmitButton","handleScan","scannedAddress","startsWith","replace","Block","SafeInfo","margin","Col","xs","alt","src","ArrowDown","style","sm","center","layout","onKeyDown","e","key","role","tabIndex","size","Identicon","diameter","justify","CopyBtn","content","explorerUrl","getExplorerInfo","fieldMutator","middle","Img","QRIcon","between","ButtonLink","Field","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","validate","composeValidators","mustBeFloat","maxValue","minValue","TextareaField","Switch","onChange","checked","Button","minWidth","data-testid","disabled","variant","ScanQRModal","isOpen","onScan","GnoField","props","Bold","this","children","React","overflowStyle","overflow","input","restInput","meta","multiline","rows","testId","rest","helperText","undefined","showError","touched","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","root","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","PureComponent","withStyles","paddingTop","paddingBottom","stylesBasedOn","flexDirection","flex","decorators","validation","render","validating","form","Wrapper","styled","div","StyledBlock","AddressInfo","safeAddress","safeName","symbol","module","exports","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","background","button","navigatorCp","navigator","getMedia","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","useWebcam","setUseWebcam","fileUploadModalOpen","setFileUploadModalOpen","setError","scannerRef","openImageDialog","current","useEffect","success","err","video","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","CircularProgress","legacyMode","onError","ref","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","addressErrorMessage","mustBeEthereumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","ENS_LOOKUP","isValidEnsName","getAddressFromENS","catch","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","renderInput","params","autoFocus","fullWidth","id","label","InputLabelProps","shrink","required","getOptionLabel","renderOption","hash","showIdenticon","display","flexGrow","AddressBookInput","addressBookSelector","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","textarea","alignItems"],"mappings":"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","file":"static/js/34.4bab8569.chunk.js","sourcesContent":["import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '75px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: '#a2a8ba',\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  manage: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    '& > button': {\n      fontFamily: 'Averta',\n      fontSize: md,\n    },\n  },\n  submitButton: {\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n    marginLeft: '15px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Switch from '@material-ui/core/Switch'\nimport Close from '@material-ui/icons/Close'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport CopyBtn from 'src/components/CopyBtn'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextareaField from 'src/components/forms/TextareaField'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, maxValue, minValue, mustBeFloat } from 'src/components/forms/validator'\nimport Identicon from 'src/components/Identicon'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport { safeSelector } from 'src/logic/safe/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { ContractsAddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { sm } from 'src/theme/variables'\n\nimport ArrowDown from '../../assets/arrow-down.svg'\n\nimport { styles } from './style'\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { ExplorerButton } from '@gnosis.pm/safe-react-components'\n\nexport interface CreatedTx {\n  contractAddress: string\n  data: string\n  value: string | number\n}\n\nexport type CustomTxProps = {\n  contractAddress?: string\n}\n\ntype Props = {\n  initialValues: CustomTxProps\n  onClose: () => void\n  onNext: (tx: CreatedTx, submit: boolean) => void\n  isABI: boolean\n  switchMethod: () => void\n  contractAddress?: string\n}\n\nconst useStyles = makeStyles(styles)\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst SendCustomTx: React.FC<Props> = ({ initialValues, onClose, onNext, contractAddress, switchMethod, isABI }) => {\n  const classes = useStyles()\n  const { ethBalance } = useSelector(safeSelector) || {}\n  const [qrModalOpen, setQrModalOpen] = useState<boolean>(false)\n  const [selectedEntry, setSelectedEntry] = useState<{ address?: string; name?: string | null } | null>({\n    address: contractAddress || initialValues.contractAddress,\n    name: '',\n  })\n  const [isValidAddress, setIsValidAddress] = useState<boolean>(true)\n\n  const saveForm = async (values) => {\n    await handleSubmit(values, false)\n    switchMethod()\n  }\n\n  const handleSubmit = (values: any, submit = true) => {\n    if (values.data || values.value) {\n      onNext(values, submit)\n    }\n  }\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const formMutators = {\n    setMax: (args, state, utils) => {\n      utils.changeValue(state, 'value', () => ethBalance)\n    },\n    setRecipient: (args, state, utils) => {\n      utils.changeValue(state, 'contractAddress', () => args[0])\n    },\n  }\n\n  return (\n    <>\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\n          Send custom transactions\n        </Paragraph>\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <GnoForm\n        formMutators={formMutators}\n        initialValues={initialValues}\n        subscription={{ submitting: true, pristine: true, values: true }}\n        onSubmit={handleSubmit}\n      >\n        {(...args) => {\n          const mutators = args[3]\n          const pristine = args[2].pristine\n          let shouldDisableSubmitButton = !isValidAddress\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          const handleScan = (value) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n\n            mutators.setRecipient(scannedAddress)\n            closeQrModal()\n          }\n\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Row margin=\"md\">\n                  <Col xs={1}>\n                    <img alt=\"Arrow Down\" src={ArrowDown} style={{ marginLeft: sm }} />\n                  </Col>\n                  <Col center=\"xs\" layout=\"column\" xs={11}>\n                    <Hairline />\n                  </Col>\n                </Row>\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (e.key === 'Tab') {\n                        return\n                      }\n                      setSelectedEntry(null)\n                    }}\n                    onClick={() => {\n                      setSelectedEntry(null)\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <Col xs={1}>\n                        <Identicon address={selectedEntry.address} diameter={32} />\n                      </Col>\n                      <Col layout=\"column\" xs={11}>\n                        <Block justify=\"left\">\n                          <Block>\n                            <Paragraph\n                              className={classes.selectAddress}\n                              noMargin\n                              onClick={() => setSelectedEntry(null)}\n                              weight=\"bolder\"\n                            >\n                              {selectedEntry.name}\n                            </Paragraph>\n                            <Paragraph\n                              className={classes.selectAddress}\n                              noMargin\n                              onClick={() => setSelectedEntry(null)}\n                              weight=\"bolder\"\n                            >\n                              {selectedEntry.address}\n                            </Paragraph>\n                          </Block>\n                          <CopyBtn content={selectedEntry.address} />\n                          <ExplorerButton explorerUrl={getExplorerInfo(selectedEntry.address)} />\n                        </Block>\n                      </Col>\n                    </Row>\n                  </div>\n                ) : (\n                  <>\n                    <Row margin=\"md\">\n                      <Col xs={11}>\n                        <ContractsAddressBookInput\n                          fieldMutator={mutators.setRecipient}\n                          pristine={pristine}\n                          setIsValidAddress={setIsValidAddress}\n                          setSelectedEntry={setSelectedEntry}\n                        />\n                      </Col>\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <Img\n                          alt=\"Scan QR\"\n                          className={classes.qrCodeBtn}\n                          height={20}\n                          onClick={() => {\n                            openQrModal()\n                          }}\n                          role=\"button\"\n                          src={QRIcon}\n                        />\n                      </Col>\n                    </Row>\n                  </>\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Value\n                    </Paragraph>\n                    <ButtonLink onClick={mutators.setMax} weight=\"bold\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: <InputAdornment position=\"end\">{nativeCoin.name}</InputAdornment>,\n                      }}\n                      name=\"value\"\n                      placeholder=\"Value*\"\n                      text=\"Value*\"\n                      type=\"text\"\n                      validate={composeValidators(mustBeFloat, maxValue(ethBalance || '0'), minValue(0))}\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"sm\">\n                  <Col>\n                    <TextareaField\n                      name=\"data\"\n                      placeholder=\"Data (hex encoded)*\"\n                      text=\"Data (hex encoded)*\"\n                      type=\"text\"\n                    />\n                  </Col>\n                </Row>\n                <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                  Use custom data (hex encoded)\n                  <Switch onChange={() => saveForm(args[2].values)} checked={!isABI} />\n                </Paragraph>\n              </Block>\n              <Hairline />\n              <Row align=\"center\" className={classes.buttonRow}>\n                <Button minWidth={140} onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button\n                  className={classes.submitButton}\n                  color=\"primary\"\n                  data-testid=\"review-tx-btn\"\n                  disabled={shouldDisableSubmitButton}\n                  minWidth={140}\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  Review\n                </Button>\n              </Row>\n              {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={handleScan} />}\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCustomTx\n","import * as React from 'react'\nimport { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import MuiTextField from '@material-ui/core/TextField'\nimport { withStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () => ({\n  root: {\n    paddingTop: lg,\n    paddingBottom: '12px',\n    lineHeight: 0,\n  },\n})\n\nclass TextField extends React.PureComponent<any> {\n  render() {\n    const {\n      classes,\n      input: { name, onChange, value, ...restInput },\n      inputAdornment,\n      meta,\n      multiline,\n      rows,\n      testId,\n      text,\n      ...rest\n    } = this.props\n    const helperText = value ? text : undefined\n    const showError = (meta.touched || !meta.pristine) && !meta.valid\n    const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n    const errorMessage = meta.error || meta.submitError\n    const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n    const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n    const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n    const inputRoot = helperText ? classes.root : ''\n    const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n    const inputProps = {\n      ...restInput,\n      autoComplete: 'off',\n      'data-testid': testId,\n    }\n    const inputRootProps = {\n      ...inputAdornment,\n      className: `${inputRoot} ${statusClasses}`,\n      disableUnderline: disableUnderline,\n    }\n\n    return (\n      <MuiTextField\n        error={hasError && showError}\n        helperText={hasError && showError ? errorMessage : helperText || ' '}\n        inputProps={inputProps} // blank in order to force to have helper text\n        InputProps={inputRootProps}\n        multiline={multiline}\n        name={name}\n        onChange={onChange}\n        rows={rows}\n        style={overflowStyle}\n        value={value}\n        {...rest}\n      />\n    )\n  }\n}\n\nexport default withStyles(styles as any)(TextField)\n","import * as React from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any) => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import React from 'react'\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport CopyBtn from 'src/components/CopyBtn'\nimport Identicon from 'src/components/Identicon'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { border, xs } from 'src/theme/variables'\nimport styled from 'styled-components'\nimport { ExplorerButton } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  .icon-section {\n    margin-right: 10px;\n  }\n\n  .data-section {\n    display: flex;\n    flex-direction: column;\n\n    .address {\n      display: flex;\n    }\n  }\n`\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  border-radius: 3px;\n`\ninterface Props {\n  safeName?: string\n  safeAddress: string\n  ethBalance?: string\n}\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst AddressInfo = ({ ethBalance, safeAddress, safeName }: Props): React.ReactElement => {\n  return (\n    <Wrapper>\n      <div className=\"icon-section\">\n        <Identicon address={safeAddress} diameter={32} />\n      </div>\n      <div className=\"data-section\">\n        {safeName && (\n          <Paragraph noMargin weight=\"bolder\">\n            {safeName}\n          </Paragraph>\n        )}\n        <div className=\"address\">\n          <Paragraph noMargin weight=\"bolder\">\n            {safeAddress}\n          </Paragraph>\n          <CopyBtn content={safeAddress} />\n          <ExplorerButton explorerUrl={getExplorerInfo(safeAddress)} />\n        </div>\n        {ethBalance && (\n          <StyledBlock>\n            <Paragraph noMargin>\n              Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n            </Paragraph>\n          </StyledBlock>\n        )}\n      </div>\n    </Wrapper>\n  )\n}\n\nexport default AddressInfo\n","module.exports = __webpack_public_path__ + \"static/media/qrcode.6dd6e2b4.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '420px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","const navigatorCp: any = navigator\n\nnavigatorCp.getMedia =\n  navigatorCp.getUserMedia || // use the proper vendor prefix\n  navigatorCp.webkitGetUserMedia ||\n  navigatorCp.mozGetUserMedia ||\n  navigatorCp.msGetUserMedia\n\nexport const checkWebcam = (success, err) =>\n  navigatorCp.getMedia(\n    { video: true },\n    () => {\n      success()\n    },\n    () => {\n      err()\n    },\n  )\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\nimport { checkWebcam } from './utils'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [useWebcam, setUseWebcam] = useState<boolean | null>(null)\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    checkWebcam(\n      () => {\n        setUseWebcam(true)\n      },\n      () => {\n        setUseWebcam(false)\n      },\n    )\n  }, [])\n\n  useEffect(() => {\n    if (useWebcam === false && !fileUploadModalOpen && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [useWebcam, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: string | null, successData: string | null) => {\n    if (successData) {\n      onScan(successData)\n    }\n    if (error) {\n      console.error('Error uploading file', error)\n      setError(`The QR could not be read`)\n    }\n    if (!useWebcam) {\n      setError(`The QR could not be read`)\n    }\n\n    setFileUploadModalOpen(false)\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error}\n        {useWebcam === null ? (\n          <Block className={classes.loaderContainer} justify=\"center\">\n            <CircularProgress />\n          </Block>\n        ) : (\n          <QrReader\n            legacyMode={!useWebcam}\n            onError={(err) => onFileScannedResolve(err, null)}\n            onScan={(data) => onFileScannedResolve(null, data)}\n            ref={scannerRef}\n            style={{ width: '400px', height: '400px' }}\n          />\n        )}\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setUseWebcam(false)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport AddressInfo from 'src/components/AddressInfo'\nimport { safeSelector } from 'src/logic/safe/store/selectors'\n\nconst SafeInfo = () => {\n  const { address: safeAddress = '', ethBalance, name: safeName } = useSelector(safeSelector) || {}\n  return <AddressInfo ethBalance={ethBalance} safeAddress={safeAddress} safeName={safeName} />\n}\n\nexport default SafeInfo\n","module.exports = __webpack_public_path__ + \"static/media/arrow-down.960a6373.svg\";","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      borderRadius: 4,\n      fontSize: '15px',\n      width: '500px',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    root: {\n      fontSize: '14px',\n      width: '420px',\n    },\n  }),\n)\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { isFeatureEnabled } from 'src/config'\nimport { FEATURES } from 'src/config/networks/network.d'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromENS } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport { trimSpaces } from 'src/utils/strings'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  pristine?: boolean\n  recipientAddress?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(address)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name } = value as AddressBookEntry\n        updateAddressInfo({ address, name })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (isFeatureEnabled(FEATURES.ENS_LOOKUP) && isValidEnsName(normalizedValue)) {\n          const address = await getAddressFromENS(normalizedValue).catch(() => normalizedValue)\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry = typeof validatedAddress === 'string' ? { address, name: normalizedValue } : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string' ? { address: validatedAddress, name: '' } : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus={true}\n          error={!!validationText}\n          fullWidth\n          id=\"filled-error-helper-text\"\n          variant=\"filled\"\n          label={validationText ? validationText : 'Recipient'}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showIdenticon />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(addressBookSelector)\n  const [validationText, setValidationText] = useState<string>('')\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(addressBookSelector)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { withStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\n\nconst styles = () => ({\n  textarea: {\n    '& > div': {\n      height: '140px',\n      paddingTop: '0',\n      paddingBottom: '0',\n      alignItems: 'auto',\n      '& > textarea': {\n        fontSize: '15px',\n        letterSpacing: '-0.5px',\n        lineHeight: '20px',\n        height: '102px',\n      },\n    },\n  },\n})\n\nconst TextareaField = ({ classes, ...props }) => (\n  <Field {...props} className={classes.textarea} component={TextField} multiline rows=\"5\" />\n)\n\nexport default withStyles(styles as any)(TextareaField)\n"],"sourceRoot":""}